/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "mintNFT(string,string,uint64,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(string,string,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fund(pay,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimNFT(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimFund()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete_donator_info(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_details()string": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 6,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "active": {
          "type": "uint64",
          "key": "active",
          "descr": "Status of the Fundraiser"
        },
        "donator_num": {
          "type": "uint64",
          "key": "donator_num",
          "descr": "Number of donators who donated"
        },
        "fund_raised": {
          "type": "uint64",
          "key": "fund_raised",
          "descr": "Amount of Algos raised"
        },
        "goal": {
          "type": "uint64",
          "key": "goal",
          "descr": "The Fundraiser's Goal"
        },
        "min_donation": {
          "type": "uint64",
          "key": "min_donation",
          "descr": "minimum amount of donation people can donate"
        },
        "reward_nft_id": {
          "type": "uint64",
          "key": "reward_nft_id",
          "descr": "ID of the reward NFT"
        },
        "title": {
          "type": "bytes",
          "key": "title",
          "descr": "Title of the fundraiser"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "charity_crowdfunding_app",
    "methods": [
      {
        "name": "mintNFT",
        "args": [
          {
            "type": "string",
            "name": "asset_name"
          },
          {
            "type": "string",
            "name": "unit_name"
          },
          {
            "type": "uint64",
            "name": "nft_amount"
          },
          {
            "type": "string",
            "name": "asset_url"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "string",
            "name": "detail"
          },
          {
            "type": "uint64",
            "name": "goal"
          },
          {
            "type": "uint64",
            "name": "min_donate"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fund",
        "args": [
          {
            "type": "pay",
            "name": "mbr_pay"
          },
          {
            "type": "pay",
            "name": "fund_pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimNFT",
        "args": [
          {
            "type": "axfer",
            "name": "optin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimFund",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "delete_donator_info",
        "args": [
          {
            "type": "account",
            "name": "donator"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_details",
        "args": [],
        "returns": {
          "type": "string"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "delete_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the CharityCrowdfundingApp smart contract.
 */
export type CharityCrowdfundingApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'mintNFT(string,string,uint64,string)uint64' | 'mintNFT', {
      argsObj: {
        asset_name: string
        unit_name: string
        nft_amount: bigint | number
        asset_url: string
      }
      argsTuple: [asset_name: string, unit_name: string, nft_amount: bigint | number, asset_url: string]
      returns: bigint
    }>
    & Record<'bootstrap(string,string,uint64,uint64)void' | 'bootstrap', {
      argsObj: {
        title: string
        detail: string
        goal: bigint | number
        min_donate: bigint | number
      }
      argsTuple: [title: string, detail: string, goal: bigint | number, min_donate: bigint | number]
      returns: void
    }>
    & Record<'fund(pay,pay)void' | 'fund', {
      argsObj: {
        mbr_pay: TransactionToSign | Transaction | Promise<SendTransactionResult>
        fund_pay: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbr_pay: TransactionToSign | Transaction | Promise<SendTransactionResult>, fund_pay: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claimNFT(axfer)void' | 'claimNFT', {
      argsObj: {
        optin: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [optin: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claimFund()uint64' | 'claimFund', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'delete_donator_info(account)void' | 'delete_donator_info', {
      argsObj: {
        donator: string | Uint8Array
      }
      argsTuple: [donator: string | Uint8Array]
      returns: void
    }>
    & Record<'get_details()string' | 'get_details', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * Status of the Fundraiser
       */
      'active'?: IntegerState
      /**
       * Number of donators who donated
       */
      'donator_num'?: IntegerState
      /**
       * Amount of Algos raised
       */
      'fund_raised'?: IntegerState
      /**
       * The Fundraiser's Goal
       */
      'goal'?: IntegerState
      /**
       * minimum amount of donation people can donate
       */
      'min_donation'?: IntegerState
      /**
       * ID of the reward NFT
       */
      'reward_nft_id'?: IntegerState
      /**
       * Title of the fundraiser
       */
      'title'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CharityCrowdfundingAppSig = keyof CharityCrowdfundingApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CharityCrowdfundingAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CharityCrowdfundingApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CharityCrowdfundingAppSig> = CharityCrowdfundingApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CharityCrowdfundingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CharityCrowdfundingAppSig> = CharityCrowdfundingApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CharityCrowdfundingAppCreateCalls = (typeof CharityCrowdfundingAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CharityCrowdfundingAppCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type CharityCrowdfundingAppDeleteCalls = (typeof CharityCrowdfundingAppCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type CharityCrowdfundingAppDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type CharityCrowdfundingAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CharityCrowdfundingAppCreateCalls) => CharityCrowdfundingAppCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: CharityCrowdfundingAppDeleteCalls) => CharityCrowdfundingAppDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CharityCrowdfundingAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the charity_crowdfunding_app smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the charity_crowdfunding_app smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mintNFT(string,string,uint64,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintNft(args: MethodArgs<'mintNFT(string,string,uint64,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintNFT(string,string,uint64,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset_name, args.unit_name, args.nft_amount, args.asset_url],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap(string,string,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(string,string,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(string,string,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.title, args.detail, args.goal, args.min_donate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund(pay,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fund(args: MethodArgs<'fund(pay,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund(pay,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr_pay, args.fund_pay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimNFT(axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimNft(args: MethodArgs<'claimNFT(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimNFT(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.optin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimFund()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimFund(args: MethodArgs<'claimFund()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimFund()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delete_donator_info(account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteDonatorInfo(args: MethodArgs<'delete_donator_info(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delete_donator_info(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.donator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_details()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getDetails(args: MethodArgs<'get_details()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_details()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the charity_crowdfunding_app smart contract
 */
export class CharityCrowdfundingAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CharityCrowdfundingAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CharityCrowdfundingApp['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the charity_crowdfunding_app smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CharityCrowdfundingAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CharityCrowdfundingAppCallFactory.create)
    const deleteArgs = params.deleteCall?.(CharityCrowdfundingAppCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the charity_crowdfunding_app smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the charity_crowdfunding_app smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.delete(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the charity_crowdfunding_app smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the mintNFT(string,string,uint64,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintNft(args: MethodArgs<'mintNFT(string,string,uint64,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.mintNft(args, params))
  }

  /**
   * Calls the bootstrap(string,string,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(string,string,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the fund(pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fund(args: MethodArgs<'fund(pay,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.fund(args, params))
  }

  /**
   * Calls the claimNFT(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimNft(args: MethodArgs<'claimNFT(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.claimNft(args, params))
  }

  /**
   * Calls the claimFund()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimFund(args: MethodArgs<'claimFund()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.claimFund(args, params))
  }

  /**
   * Calls the delete_donator_info(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteDonatorInfo(args: MethodArgs<'delete_donator_info(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.deleteDonatorInfo(args, params))
  }

  /**
   * Calls the get_details()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getDetails(args: MethodArgs<'get_details()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.getDetails(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CharityCrowdfundingApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get active() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'active')
      },
      get donator_num() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'donator_num')
      },
      get fund_raised() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'fund_raised')
      },
      get goal() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'goal')
      },
      get min_donation() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'min_donation')
      },
      get reward_nft_id() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'reward_nft_id')
      },
      get title() {
        return CharityCrowdfundingAppClient.getBinaryState(state, 'title')
      },
    }
  }

  public compose(): CharityCrowdfundingAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      mintNft(args: MethodArgs<'mintNFT(string,string,uint64,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap(string,string,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fund(args: MethodArgs<'fund(pay,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimNft(args: MethodArgs<'claimNFT(axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimFund(args: MethodArgs<'claimFund()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimFund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteDonatorInfo(args: MethodArgs<'delete_donator_info(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteDonatorInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getDetails(args: MethodArgs<'get_details()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getDetails(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CharityCrowdfundingAppComposer
  }
}
export type CharityCrowdfundingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mintNFT(string,string,uint64,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintNft(args: MethodArgs<'mintNFT(string,string,uint64,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'mintNFT(string,string,uint64,string)uint64'>]>

  /**
   * Calls the bootstrap(string,string,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(string,string,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'bootstrap(string,string,uint64,uint64)void'>]>

  /**
   * Calls the fund(pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fund(args: MethodArgs<'fund(pay,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'fund(pay,pay)void'>]>

  /**
   * Calls the claimNFT(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimNft(args: MethodArgs<'claimNFT(axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'claimNFT(axfer)void'>]>

  /**
   * Calls the claimFund()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimFund(args: MethodArgs<'claimFund()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'claimFund()uint64'>]>

  /**
   * Calls the delete_donator_info(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteDonatorInfo(args: MethodArgs<'delete_donator_info(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'delete_donator_info(account)void'>]>

  /**
   * Calls the get_details()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDetails(args: MethodArgs<'get_details()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'get_details()string'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the charity_crowdfunding_app smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the charity_crowdfunding_app smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CharityCrowdfundingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<CharityCrowdfundingAppComposerResults<TReturns>>
}
export type CharityCrowdfundingAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
