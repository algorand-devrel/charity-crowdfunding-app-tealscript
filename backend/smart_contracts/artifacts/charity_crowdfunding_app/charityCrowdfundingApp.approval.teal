#pragma version 9

// This TEAL was generated by TEALScript v0.54.0
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_DeleteApplication call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_DeleteApplication

NOT_IMPLEMENTED:
	err

// authorizeCreator()void
abi_route_authorizeCreator:
	// execute authorizeCreator()void
	callsub authorizeCreator
	int 1
	return

authorizeCreator:
	proto 0 0

	// contract.algo.ts:17
	// assert(this.app.creator == this.txn.sender)
	txna Applications 0
	app_params_get AppCreator
	assert
	txn Sender
	==
	assert
	retsub

// optInAsset(asset)void
abi_route_optInAsset:
	// assetId: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute optInAsset(asset)void
	callsub optInAsset
	int 1
	return

optInAsset:
	proto 1 0

	// contract.algo.ts:21
	// this.authorizeCreator()
	callsub authorizeCreator

	// contract.algo.ts:22
	// sendAssetTransfer({
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       fee: 0,
	//       xferAsset: assetId,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contract.algo.ts:23
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contract.algo.ts:24
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contract.algo.ts:25
	// fee: 0
	int 0
	itxn_field Fee

	// contract.algo.ts:26
	// xferAsset: assetId
	frame_dig -1 // assetId: asset
	itxn_field XferAsset

	// Submit inner transaction
	itxn_submit
	retsub

// createApplication()void
abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

createApplication:
	proto 0 0

	// contract.algo.ts:32
	// this.fundRaised.value = 0
	byte 0x66756e64526169736564 // "fundRaised"
	int 0
	app_global_put

	// contract.algo.ts:33
	// this.donatorNum.value = 0
	byte 0x646f6e61746f724e756d // "donatorNum"
	int 0
	app_global_put

	// contract.algo.ts:34
	// this.active.value = 0
	byte 0x616374697665 // "active"
	int 0
	app_global_put
	retsub

// bootstrap(string,uint64,string,string,pay,uint64,uint64,string,string)uint64
//
// /*
// Mint Reward NFT, set fundraiser active, and set fundraise details.
abi_route_bootstrap:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// assetUrl: string
	txna ApplicationArgs 8
	extract 2 0

	// nftAmount: uint64
	txna ApplicationArgs 7
	btoi

	// unitName: string
	txna ApplicationArgs 6
	extract 2 0

	// assetName: string
	txna ApplicationArgs 5
	extract 2 0

	// mbrPay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// minDonation: uint64
	txna ApplicationArgs 4
	btoi

	// goal: uint64
	txna ApplicationArgs 3
	btoi

	// detail: string
	txna ApplicationArgs 2
	extract 2 0

	// title: string
	txna ApplicationArgs 1
	extract 2 0

	// execute bootstrap(string,uint64,string,string,pay,uint64,uint64,string,string)uint64
	callsub bootstrap
	int 1
	return

bootstrap:
	proto 10 0

	// contract.algo.ts:52
	// this.authorizeCreator()
	callsub authorizeCreator

	// contract.algo.ts:53
	// assert(mbrPay.amount >= 100_000)
	frame_dig -5 // mbrPay: pay
	gtxns Amount
	int 100_000
	>=
	assert

	// contract.algo.ts:54
	// assert(mbrPay.receiver == this.app.address)
	frame_dig -5 // mbrPay: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contract.algo.ts:55
	// assert(mbrPay.sender == this.app.creator)
	frame_dig -5 // mbrPay: pay
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contract.algo.ts:57
	// this.title.value = title
	byte 0x7469746c65 // "title"
	frame_dig -1 // title: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contract.algo.ts:58
	// this.detail.value = detail
	byte 0x64657461696c // "detail"
	frame_dig -2 // detail: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contract.algo.ts:59
	// this.goal.value = goal
	byte 0x676f616c // "goal"
	frame_dig -3 // goal: uint64
	app_global_put

	// contract.algo.ts:60
	// this.minDonation.value = minDonation
	byte 0x6d696e446f6e6174696f6e // "minDonation"
	frame_dig -4 // minDonation: uint64
	app_global_put

	// contract.algo.ts:61
	// this.active.value = 1
	byte 0x616374697665 // "active"
	int 1
	app_global_put

	// contract.algo.ts:63
	// createdNft = sendAssetCreation({
	//       configAssetDecimals: 0,
	//       configAssetName: assetName,
	//       configAssetTotal: nftAmount,
	//       configAssetURL: assetUrl,
	//       configAssetUnitName: unitName,
	//       fee: 0,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contract.algo.ts:64
	// configAssetDecimals: 0
	int 0
	itxn_field ConfigAssetDecimals

	// contract.algo.ts:65
	// configAssetName: assetName
	frame_dig -6 // assetName: bytes
	itxn_field ConfigAssetName

	// contract.algo.ts:66
	// configAssetTotal: nftAmount
	frame_dig -8 // nftAmount: uint64
	itxn_field ConfigAssetTotal

	// contract.algo.ts:67
	// configAssetURL: assetUrl
	frame_dig -9 // assetUrl: bytes
	itxn_field ConfigAssetURL

	// contract.algo.ts:68
	// configAssetUnitName: unitName
	frame_dig -7 // unitName: bytes
	itxn_field ConfigAssetUnitName

	// contract.algo.ts:69
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury -10 // createdNft: asset

	// contract.algo.ts:72
	// this.rewardNftId.value = createdNft
	byte 0x7265776172644e66744964 // "rewardNftId"
	frame_dig -10 // createdNft: asset
	app_global_put

	// contract.algo.ts:73
	// return btoi(itob(createdNft))
	frame_dig -10 // createdNft: asset
	itob
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// fund(pay)void
//
// /*
// The fund method will
// - check if the sender sent the correct mbr_pay, and funded more than min_donation
// - check if the fundraiser is active
// - check if the sender has donated before
// - if the sender has donated before, add the amount to the previous donation amount
// - if the sender has not donated before, set donation amount and send reward NFT
//
// @param mbr_pay: The payment transaction that covers the Box MBR
// @param fund_pay: The payment transaction that covers the donation amount
abi_route_fund:
	byte 0x; dupn 2 // push empty bytes to fill the stack frame for this subroutine's local variables

	// fundPay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute fund(pay)void
	callsub fund
	int 1
	return

fund:
	proto 4 0

	// contract.algo.ts:89
	// fundAmount = fundPay.amount
	frame_dig -1 // fundPay: pay
	gtxns Amount
	frame_bury -2 // fundAmount: uint64

	// contract.algo.ts:90
	// totalFund = this.fundRaised.value
	byte 0x66756e64526169736564 // "fundRaised"
	app_global_get
	frame_bury -3 // totalFund: uint64

	// contract.algo.ts:91
	// newDonationAmount = 0
	int 0
	frame_bury -4 // newDonationAmount: uint64

	// contract.algo.ts:93
	// assert(fundAmount > BOXMBR)
	frame_dig -2 // fundAmount: uint64
	int 40900
	>
	assert

	// contract.algo.ts:94
	// assert(this.active.value == 1)
	byte 0x616374697665 // "active"
	app_global_get
	int 1
	==
	assert

	// contract.algo.ts:95
	// assert(fundPay.sender == this.txn.sender)
	frame_dig -1 // fundPay: pay
	gtxns Sender
	txn Sender
	==
	assert

	// contract.algo.ts:96
	// assert(fundAmount >= this.minDonation.value)
	frame_dig -2 // fundAmount: uint64
	byte 0x6d696e446f6e6174696f6e // "minDonation"
	app_global_get
	>=
	assert

	// contract.algo.ts:97
	// assert(fundPay.receiver == this.app.address)
	frame_dig -1 // fundPay: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// if0_condition
	// contract.algo.ts:99
	// this.donatorInfo(this.txn.sender).exists
	txn Sender
	box_len
	swap
	pop
	bz if0_else

	// if0_consequent
	// contract.algo.ts:100
	// newDonationAmount = this.donatorInfo(this.txn.sender).value + fundAmount
	txn Sender
	box_get
	assert
	btoi
	frame_dig -2 // fundAmount: uint64
	+
	frame_bury -4 // newDonationAmount: uint64

	// contract.algo.ts:101
	// this.donatorInfo(this.txn.sender).value = newDonationAmount
	txn Sender
	frame_dig -4 // newDonationAmount: uint64
	itob
	box_put

	// contract.algo.ts:102
	// totalFund = totalFund + fundAmount
	frame_dig -3 // totalFund: uint64
	frame_dig -2 // fundAmount: uint64
	+
	frame_bury -3 // totalFund: uint64
	b if0_end

if0_else:
	// contract.algo.ts:104
	// this.donatorInfo(this.txn.sender).value = fundAmount
	txn Sender
	frame_dig -2 // fundAmount: uint64
	itob
	box_put

	// contract.algo.ts:106
	// sendAssetTransfer({
	//         xferAsset: this.rewardNftId.value,
	//         assetAmount: 1,
	//         assetReceiver: this.txn.sender,
	//         fee: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contract.algo.ts:107
	// xferAsset: this.rewardNftId.value
	byte 0x7265776172644e66744964 // "rewardNftId"
	app_global_get
	itxn_field XferAsset

	// contract.algo.ts:108
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// contract.algo.ts:109
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contract.algo.ts:110
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contract.algo.ts:112
	// this.donatorNum.value = this.donatorNum.value + 1
	byte 0x646f6e61746f724e756d // "donatorNum"
	byte 0x646f6e61746f724e756d // "donatorNum"
	app_global_get
	int 1
	+
	app_global_put

	// contract.algo.ts:113
	// totalFund = totalFund + fundAmount - BOXMBR
	frame_dig -3 // totalFund: uint64
	frame_dig -2 // fundAmount: uint64
	+
	int 40900
	-
	frame_bury -3 // totalFund: uint64

if0_end:
	retsub

// claimFund()uint64
//
// /*
// Used to claim the funds raised by the fundraiser. Only the creator can claim the funds.
//
// @output: the amount of funds claimed
abi_route_claimFund:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute claimFund()uint64
	callsub claimFund
	int 1
	return

claimFund:
	proto 1 0

	// contract.algo.ts:124
	// this.authorizeCreator()
	callsub authorizeCreator

	// contract.algo.ts:126
	// totalRaisedFunds = this.fundRaised.value
	byte 0x66756e64526169736564 // "fundRaised"
	app_global_get
	frame_bury -1 // totalRaisedFunds: uint64

	// contract.algo.ts:128
	// sendPayment({
	//       amount: totalRaisedFunds,
	//       receiver: this.txn.sender,
	//       fee: 0,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contract.algo.ts:129
	// amount: totalRaisedFunds
	frame_dig -1 // totalRaisedFunds: uint64
	itxn_field Amount

	// contract.algo.ts:130
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contract.algo.ts:131
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contract.algo.ts:134
	// this.active.value = 0
	byte 0x616374697665 // "active"
	int 0
	app_global_put

	// contract.algo.ts:135
	// this.fundRaised.value = 0
	byte 0x66756e64526169736564 // "fundRaised"
	int 0
	app_global_put

	// contract.algo.ts:136
	// return totalRaisedFunds
	frame_dig -1 // totalRaisedFunds: uint64
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// deleteDonatorInfo(account)void
//
// /*
// Delete the donator info box. Only the creator can delete the donator info.
//
// @param donator: the donator address of the box to be deleted
abi_route_deleteDonatorInfo:
	// donator: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute deleteDonatorInfo(account)void
	callsub deleteDonatorInfo
	int 1
	return

deleteDonatorInfo:
	proto 1 0

	// contract.algo.ts:146
	// this.authorizeCreator()
	callsub authorizeCreator

	// contract.algo.ts:148
	// assert(this.active.value == 0)
	byte 0x616374697665 // "active"
	app_global_get
	int 0
	==
	assert

	// contract.algo.ts:149
	// assert(this.donatorInfo(donator).exists)
	frame_dig -1 // donator: account
	box_len
	swap
	pop
	assert

	// contract.algo.ts:151
	// this.donatorInfo(donator).delete()
	frame_dig -1 // donator: account
	box_del

	// contract.algo.ts:153
	// sendPayment({
	//       amount: BOXMBR,
	//       receiver: donator,
	//       fee: 0,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contract.algo.ts:154
	// amount: BOXMBR
	int 40900
	itxn_field Amount

	// contract.algo.ts:155
	// receiver: donator
	frame_dig -1 // donator: account
	itxn_field Receiver

	// contract.algo.ts:156
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteApplication()void
abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

deleteApplication:
	proto 0 0

	// contract.algo.ts:162
	// this.authorizeCreator()
	callsub authorizeCreator

	// contract.algo.ts:163
	// assert(this.active.value == 0)
	byte 0x616374697665 // "active"
	app_global_get
	int 0
	==
	assert

	// contract.algo.ts:164
	// assert(this.fundRaised.value == 0)
	byte 0x66756e64526169736564 // "fundRaised"
	app_global_get
	int 0
	==
	assert
	retsub

create_NoOp:
	txn NumAppArgs
	bz abi_route_createApplication
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "authorizeCreator()void"
	method "optInAsset(asset)void"
	method "bootstrap(string,string,uint64,uint64,pay,string,string,uint64,string)uint64"
	method "fund(pay)void"
	method "claimFund()uint64"
	method "deleteDonatorInfo(account)void"
	txna ApplicationArgs 0
	match abi_route_authorizeCreator abi_route_optInAsset abi_route_bootstrap abi_route_fund abi_route_claimFund abi_route_deleteDonatorInfo
	err

create_DeleteApplication:
	err

call_DeleteApplication:
	txn NumAppArgs
	bz abi_route_deleteApplication
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match abi_route_deleteApplication
	err