"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTestAccount = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const __1 = require("../");
const account_1 = require("../account");
const transfer_1 = require("../transfer");
/**
 * Creates an ephemeral Algorand account for the purposes of testing.
 * Returns a newly created random test account that is funded from the dispenser
 * DO NOT USE THIS TO CREATE A MAINNET ACCOUNT!
 * Note: By default this will log the mnemonic of the account.
 * @param param0 The config for the test account to generate
 * @param algod An algod client
 * @param kmd A KMD client, if not specified then a default KMD client will be loaded from environment variables
 * @returns The account, with private key loaded
 */
async function getTestAccount({ suppressLog, initialFunds }, algod, kmd) {
    const account = algosdk_1.default.generateAccount();
    __1.Config.getLogger(suppressLog).info(`New test account created with address '${account.addr}' and mnemonic '${algosdk_1.default.secretKeyToMnemonic(account.sk)}'.`);
    const dispenser = await (0, account_1.getDispenserAccount)(algod, kmd);
    await (0, transfer_1.transferAlgos)({ from: dispenser, to: account.addr, amount: initialFunds, note: 'Funding test account', suppressLog }, algod);
    const accountInfo = await algod.accountInformation(account.addr).do();
    __1.Config.getLogger(suppressLog).info('Test account funded; account balance: %d ÂµAlgos', accountInfo.amount);
    return account;
}
exports.getTestAccount = getTestAccount;
//# sourceMappingURL=account.js.map