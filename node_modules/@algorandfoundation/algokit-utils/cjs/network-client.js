"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLocalNet = exports.isMainNet = exports.isTestNet = exports.getAlgoKmdClient = exports.getAlgoIndexerClient = exports.getAlgoClient = exports.getDefaultLocalNetConfig = exports.getAlgoNodeConfig = exports.getIndexerConfigFromEnvironment = exports.getAlgodConfigFromEnvironment = exports.getConfigFromEnvOrDefaults = void 0;
const algosdk_1 = __importStar(require("algosdk"));
const algo_http_client_with_retry_1 = require("./types/algo-http-client-with-retry");
/** Retrieve configurations from environment variables when defined or get defaults (expects to be called from a Node.js environment not algod-side) */
function getConfigFromEnvOrDefaults() {
    if (!process || !process.env) {
        throw new Error('Attempt to get default algod configuration from a non Node.js context; supply the config instead');
    }
    const algodConfig = !process.env.ALGOD_SERVER
        ? getDefaultLocalNetConfig('algod')
        : { server: process.env.ALGOD_SERVER, port: process.env.ALGOD_PORT, token: process.env.ALGOD_TOKEN };
    const indexerConfig = !process.env.INDEXER_SERVER
        ? getDefaultLocalNetConfig('indexer')
        : {
            server: process.env.INDEXER_SERVER,
            port: process.env.INDEXER_PORT,
            token: process.env.INDEXER_TOKEN,
        };
    return {
        algodConfig,
        indexerConfig,
        kmdConfig: process && process.env && process.env.ALGOD_SERVER
            ? { ...algodConfig, port: process?.env?.KMD_PORT ?? '4002' }
            : getDefaultLocalNetConfig('kmd'),
    };
}
exports.getConfigFromEnvOrDefaults = getConfigFromEnvOrDefaults;
/** Retrieve the algod configuration from environment variables (expects to be called from a Node.js environment not algod-side) */
function getAlgodConfigFromEnvironment() {
    if (!process || !process.env) {
        throw new Error('Attempt to get default algod configuration from a non Node.js context; supply the config instead');
    }
    if (!process.env.ALGOD_SERVER) {
        throw new Error('Attempt to get default algod configuration without specifying ALGOD_SERVER in the environment variables');
    }
    return {
        server: process.env.ALGOD_SERVER,
        port: process.env.ALGOD_PORT,
        token: process.env.ALGOD_TOKEN,
    };
}
exports.getAlgodConfigFromEnvironment = getAlgodConfigFromEnvironment;
/** Retrieve the indexer configuration from environment variables (expects to be called from a Node.js environment not algod-side) */
function getIndexerConfigFromEnvironment() {
    if (!process || !process.env) {
        throw new Error('Attempt to get default indexer configuration from a non Node.js context; supply the config instead');
    }
    if (!process.env.INDEXER_SERVER) {
        throw new Error('Attempt to get default indexer configuration without specifying INDEXER_SERVER in the environment variables');
    }
    return {
        server: process.env.INDEXER_SERVER,
        port: process.env.INDEXER_PORT,
        token: process.env.INDEXER_TOKEN,
    };
}
exports.getIndexerConfigFromEnvironment = getIndexerConfigFromEnvironment;
/** Returns the Algorand configuration to point to the AlgoNode service
 *
 * @param network Which network to connect to - TestNet or MainNet
 * @param config Which algod config to return - Algod or Indexer
 */
function getAlgoNodeConfig(network, config) {
    return {
        server: `https://${network}-${config === 'algod' ? 'api' : 'idx'}.algonode.cloud/`,
        port: 443,
    };
}
exports.getAlgoNodeConfig = getAlgoNodeConfig;
/** Returns the Algorand configuration to point to the default LocalNet
 *
 * @param configOrPort Which algod config to return - algod, kmd, or indexer OR a port number
 */
function getDefaultLocalNetConfig(configOrPort) {
    return {
        server: `http://localhost`,
        port: configOrPort === 'algod' ? 4001 : configOrPort === 'indexer' ? 8980 : configOrPort === 'kmd' ? 4002 : configOrPort,
        token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
    };
}
exports.getDefaultLocalNetConfig = getDefaultLocalNetConfig;
function getAlgoTokenHeader(server, token, defaultHeader) {
    // Purestake uses a slightly different API key header than the default
    if (server.includes('purestake.io') && typeof token === 'string')
        return { 'X-API-Key': token };
    // Because we override the default HTTP Client construction (to get retries) we need to put a string token into the standard header ourselves
    return typeof token === 'string' ? { [defaultHeader ?? 'X-Algo-API-Token']: token } : token ?? {};
}
/** Returns an algod SDK client that automatically retries on idempotent calls
 *
 * @param config The config if you want to override the default (getting config from process.env)
 * @example Default (load from environment variables)
 *
 *  ```typescript
 *  // Uses process.env.ALGOD_SERVER, process.env.ALGOD_PORT and process.env.ALGOD_TOKEN
 *  // Automatically detects if you are using PureStake to switch in the right header name for ALGOD_TOKEN
 *  const algod = getAlgoClient()
 *  await algod.healthCheck().do()
 *  ```
 * @example AlgoNode (testnet)
 * ```typescript
 *  const algod = getAlgoClient(getAlgoNodeConfig('testnet', 'algod'))
 *  await algod.healthCheck().do()
 * ```
 * @example AlgoNode (mainnet)
 * ```typescript
 *  const algod = getAlgoClient(getAlgoNodeConfig('mainnet', 'algod'))
 *  await algod.healthCheck().do()
 * ```
 * @example Custom (e.g. default LocalNet, although we recommend loading this into a .env and using the Default option instead)
 * ```typescript
 *  const algod = getAlgoClient({server: 'http://localhost', port: '4001', token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'})
 *  await algod.healthCheck().do()
 * ```
 */
function getAlgoClient(config) {
    const { token, server, port } = config ?? getAlgodConfigFromEnvironment();
    const httpClientWithRetry = new algo_http_client_with_retry_1.AlgoHttpClientWithRetry(getAlgoTokenHeader(server, token), server, port);
    return new algosdk_1.default.Algodv2(httpClientWithRetry, server);
}
exports.getAlgoClient = getAlgoClient;
/** Returns an indexer SDK client that automatically retries on idempotent calls
 *
 * @param config The config if you want to override the default (getting config from process.env)
 * @example Default (load from environment variables)
 *
 *  ```typescript
 *  // Uses process.env.INDEXER_SERVER, process.env.INDEXER_PORT and process.env.INDEXER_TOKEN
 *  // Automatically detects if you are using PureStake to switch in the right header name for INDEXER_TOKEN
 *  const indexer = getAlgoIndexerClient()
 *  await indexer.makeHealthCheck().do()
 *  ```
 * @example AlgoNode (testnet)
 * ```typescript
 *  const indexer = getAlgoIndexerClient(getAlgoNodeConfig('testnet', 'indexer'))
 *  await indexer.makeHealthCheck().do()
 * ```
 * @example AlgoNode (mainnet)
 * ```typescript
 *  const indexer = getAlgoIndexerClient(getAlgoNodeConfig('mainnet', 'indexer'))
 *  await indexer.makeHealthCheck().do()
 * ```
 * @example Custom (e.g. default LocalNet, although we recommend loading this into a .env and using the Default option instead)
 * ```typescript
 *  const indexer = getAlgoIndexerClient({server: 'http://localhost', port: '8980', token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'})
 *  await indexer.makeHealthCheck().do()
 * ```
 */
function getAlgoIndexerClient(config) {
    const { token, server, port } = config ?? getIndexerConfigFromEnvironment();
    const httpClientWithRetry = new algo_http_client_with_retry_1.AlgoHttpClientWithRetry(getAlgoTokenHeader(server, token, 'X-Indexer-API-Token'), server, port);
    return new algosdk_1.Indexer(httpClientWithRetry);
}
exports.getAlgoIndexerClient = getAlgoIndexerClient;
/**
 * Returns a KMD SDK client that automatically retries on idempotent calls
 *
 * KMD client allows you to export private keys, which is useful to get the default account in a LocalNet network.
 *
 * @param config The config if you want to override the default (getting config from process.env)
 * @example Default (load from environment variables)
 *
 *  ```typescript
 *  // Uses process.env.ALGOD_SERVER, process.env.KMD_PORT (or if not specified: port 4002) and process.env.ALGOD_TOKEN
 *  const kmd = getAlgoKmdClient()
 *  ```
 * @example Custom (e.g. default LocalNet, although we recommend loading this into a .env and using the Default option instead)
 * ```typescript
 *  const kmd = getAlgoKmdClient({server: 'http://localhost', port: '4002', token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'})
 * ```
 */
function getAlgoKmdClient(config) {
    const { token, server } = config ?? getAlgodConfigFromEnvironment();
    // We can only use Kmd on the LocalNet otherwise it's not exposed so this makes some assumptions
    // (e.g. same token and server as algod and port 4002 by default)
    return new algosdk_1.Kmd(token, server, process?.env?.KMD_PORT ?? '4002');
}
exports.getAlgoKmdClient = getAlgoKmdClient;
async function isTestNet(algod) {
    const params = await algod.getTransactionParams().do();
    return ['testnet-v1.0', 'testnet-v1', 'testnet'].includes(params.genesisID);
}
exports.isTestNet = isTestNet;
async function isMainNet(algod) {
    const params = await algod.getTransactionParams().do();
    return ['mainnet-v1.0', 'mainnet-v1', 'mainnet'].includes(params.genesisID);
}
exports.isMainNet = isMainNet;
var localnet_1 = require("./localnet");
Object.defineProperty(exports, "isLocalNet", { enumerable: true, get: function () { return localnet_1.isLocalNet; } });
//# sourceMappingURL=network-client.js.map