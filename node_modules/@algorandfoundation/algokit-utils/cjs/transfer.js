"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferAsset = exports.ensureFunded = exports.transferAlgos = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const _1 = require("./");
const network_client_1 = require("./network-client");
const transaction_1 = require("./transaction");
const dispenser_client_1 = require("./types/dispenser-client");
const util_1 = require("./util");
async function fundUsingDispenserApi(dispenserClient, addressToFund, fundAmount) {
    const response = await dispenserClient.fund(addressToFund, fundAmount);
    return { transactionId: response.txId, amount: response.amount };
}
async function fundUsingTransfer({ algod, addressToFund, funding, fundAmount, transactionParams, sendParams, note, kmd, }) {
    if (funding.fundingSource instanceof dispenser_client_1.TestNetDispenserApiClient) {
        throw new Error('Dispenser API client is not supported in this context.');
    }
    const from = funding.fundingSource ?? (await (0, _1.getDispenserAccount)(algod, kmd));
    const amount = (0, _1.microAlgos)(Math.max(fundAmount, funding.minFundingIncrement?.microAlgos ?? 0));
    const response = await transferAlgos({
        from,
        to: addressToFund,
        note: note ?? 'Funding account to meet minimum requirement',
        amount: amount,
        transactionParams: transactionParams,
        ...sendParams,
    }, algod);
    return {
        transactionId: response.transaction.txID(),
        amount: Number(response.transaction.amount),
    };
}
/**
 * Transfer ALGOs between two accounts.
 * @param transfer The transfer definition
 * @param algod An algod client
 * @returns The transaction object and optionally the confirmation if it was sent to the chain (`skipSending` is `false` or unset)
 *
 * @example Usage example
 * ```typescript
 * await algokit.transferAlgos({ from, to, amount: algokit.algos(1) }, algod)
 * ```
 */
async function transferAlgos(transfer, algod) {
    const { from, to, amount, note, transactionParams, ...sendParams } = transfer;
    const transaction = algosdk_1.default.makePaymentTxnWithSuggestedParamsFromObject({
        from: (0, transaction_1.getSenderAddress)(from),
        to: typeof to === 'string' ? to : (0, transaction_1.getSenderAddress)(to),
        amount: amount.microAlgos,
        note: (0, transaction_1.encodeTransactionNote)(note),
        suggestedParams: await (0, transaction_1.getTransactionParams)(transactionParams, algod),
        closeRemainderTo: undefined,
        rekeyTo: undefined,
    });
    if (!sendParams.skipSending) {
        _1.Config.getLogger(sendParams.suppressLog).debug(`Transferring ${amount.microAlgos}ÂµALGOs from ${(0, transaction_1.getSenderAddress)(from)} to ${to}`);
    }
    return (0, transaction_1.sendTransaction)({ transaction, from, sendParams }, algod);
}
exports.transferAlgos = transferAlgos;
/**
 * Funds a given account using a funding source such that it has a certain amount of algos free to spend (accounting for ALGOs locked in minimum balance requirement).
 *
 * https://developer.algorand.org/docs/get-details/accounts/#minimum-balance
 *
 * @param funding The funding configuration of type `EnsureFundedParams`, including the account to fund, minimum spending balance, and optional parameters. If you set `useDispenserApi` to true, you must also set `ALGOKIT_DISPENSER_ACCESS_TOKEN` in your environment variables.
 * @param algod An instance of the Algodv2 client.
 * @param kmd An optional instance of the Kmd client.
 * @returns
 * - `EnsureFundedReturnType` if funds were transferred.
 * - `undefined` if no funds were needed.
 */
async function ensureFunded(funding, algod, kmd) {
    const { accountToFund, fundingSource, minSpendingBalance, minFundingIncrement, transactionParams, note, ...sendParams } = funding;
    const addressToFund = typeof accountToFund === 'string' ? accountToFund : (0, transaction_1.getSenderAddress)(accountToFund);
    const accountInfo = await algod.accountInformation(addressToFund).do();
    const balance = Number(accountInfo.amount);
    const minimumBalanceRequirement = (0, _1.microAlgos)(Number(accountInfo['min-balance']));
    const currentSpendingBalance = (0, _1.microAlgos)(balance - minimumBalanceRequirement.microAlgos);
    const fundAmount = (0, util_1.calculateFundAmount)(minSpendingBalance.microAlgos, currentSpendingBalance.microAlgos, minFundingIncrement?.microAlgos ?? 0);
    if (fundAmount !== null) {
        if ((await (0, network_client_1.isTestNet)(algod)) && fundingSource instanceof dispenser_client_1.TestNetDispenserApiClient) {
            return fundUsingDispenserApi(fundingSource, addressToFund, fundAmount);
        }
        else {
            return fundUsingTransfer({
                algod,
                addressToFund,
                funding,
                fundAmount,
                transactionParams,
                sendParams,
                note,
                kmd,
            });
        }
    }
    return undefined;
}
exports.ensureFunded = ensureFunded;
/**
 * Transfer asset between two accounts.
 * @param transfer The transfer definition
 * @param algod An algod client
 * @returns The transaction object and optionally the confirmation if it was sent to the chain (`skipSending` is `false` or unset)
 *
 * @example Usage example
 * ```typescript
 * await algokit.transferAsset({ from, to, assetId, amount }, algod)
 * ```
 */
async function transferAsset(transfer, algod) {
    const { from, to, assetId, amount, transactionParams, clawbackFrom, note, ...sendParams } = transfer;
    const transaction = algosdk_1.default.makeAssetTransferTxnWithSuggestedParamsFromObject({
        from: (0, transaction_1.getSenderAddress)(from),
        to: typeof to === 'string' ? to : (0, transaction_1.getSenderAddress)(to),
        closeRemainderTo: undefined,
        revocationTarget: clawbackFrom ? (typeof clawbackFrom === 'string' ? clawbackFrom : (0, transaction_1.getSenderAddress)(clawbackFrom)) : undefined,
        amount: amount,
        note: (0, transaction_1.encodeTransactionNote)(note),
        assetIndex: assetId,
        suggestedParams: await (0, transaction_1.getTransactionParams)(transactionParams, algod),
        rekeyTo: undefined,
    });
    if (!sendParams.skipSending) {
        _1.Config.getLogger(sendParams.suppressLog).debug(`Transferring ASA (${assetId}) of amount ${amount} from ${(0, transaction_1.getSenderAddress)(from)} to ${to}`);
    }
    return (0, transaction_1.sendTransaction)({ transaction, from, sendParams }, algod);
}
exports.transferAsset = transferAsset;
//# sourceMappingURL=transfer.js.map