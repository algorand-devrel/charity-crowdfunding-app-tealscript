#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs"));
const argparse_1 = require("argparse");
const compiler_1 = __importDefault(require("../lib/compiler"));
require("dotenv/config");
const version_1 = require("../version");
const parser = new argparse_1.ArgumentParser({
    description: 'Argparse example',
});
parser.add_argument('input', { help: 'TEALScript source file to compile' });
parser.add_argument('output', { help: 'output directory for artifacts' });
parser.add_argument('-v', '--version', { action: 'version', version: version_1.VERSION });
parser.add_argument('--disable-warnings', {
    help: 'disables compiler warnings',
    action: 'store_true',
    default: false,
});
parser.add_argument('--unsafe-disable-overflow-checks', {
    help: 'disables overflow checks for ABI uint/ufixed types',
    action: 'store_true',
    default: false,
});
parser.add_argument('--unsafe-disable-typescript', {
    help: 'disables typescript diagnostics',
    action: 'store_true',
    default: false,
});
const parsed = parser.parse_args();
const filename = parsed.input;
const content = fs.readFileSync(filename, 'utf-8');
// Output dir for artifacts
const dir = parsed.output;
const options = {
    filename,
    algodPort: process.env.ALGOD_PORT ? Number(process.env.ALGOD_PORT) : undefined,
    algodServer: process.env.ALGOD_SERVER,
    algodToken: process.env.ALGOD_TOKEN,
    disableWarnings: parsed.disable_warnings,
    disableOverflowChecks: parsed.unsafe_disable_overflow_checks,
    disableTypeScript: parsed.unsafe_disable_typescript,
};
const compilers = compiler_1.default.compileAll(content, options);
compilers.forEach(async (compilerPromise) => {
    const compiler = await compilerPromise;
    const { name } = compiler;
    const approvalPath = path_1.default.join(dir, `${name}.approval.teal`);
    const clearPath = path_1.default.join(dir, `${name}.clear.teal`);
    const abiPath = path_1.default.join(dir, `${name}.abi.json`);
    const appPath = path_1.default.join(dir, `${name}.json`);
    const srcmapPath = path_1.default.join(dir, `${name}.src_map.json`);
    const lsigPath = path_1.default.join(dir, `${name}.lsig.teal`);
    if (fs.existsSync(approvalPath))
        fs.rmSync(approvalPath);
    if (fs.existsSync(clearPath))
        fs.rmSync(clearPath);
    if (fs.existsSync(abiPath))
        fs.rmSync(abiPath);
    if (fs.existsSync(appPath))
        fs.rmSync(appPath);
    if (fs.existsSync(srcmapPath))
        fs.rmSync(srcmapPath);
    if (fs.existsSync(lsigPath))
        fs.rmSync(lsigPath);
    if (compiler.teal.lsig.length > 0) {
        fs.writeFileSync(lsigPath, compiler.teal.lsig.map((t) => t.teal).join('\n'));
        fs.writeFileSync(srcmapPath, JSON.stringify(compiler.srcMap, null, 2));
        return;
    }
    fs.writeFileSync(approvalPath, compiler.teal.approval.map((t) => t.teal).join('\n'));
    fs.writeFileSync(clearPath, compiler.teal.clear.map((t) => t.teal).join('\n'));
    fs.writeFileSync(abiPath, JSON.stringify(compiler.abi, null, 2));
    fs.writeFileSync(srcmapPath, JSON.stringify(compiler.srcMap, null, 2));
    fs.writeFileSync(appPath, JSON.stringify(compiler.appSpec(), null, 2));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVhbHNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vdGVhbHNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLGdEQUF3QjtBQUN4Qix1Q0FBeUI7QUFDekIsdUNBQTBDO0FBQzFDLCtEQUE0RDtBQUU1RCx5QkFBdUI7QUFDdkIsd0NBQXFDO0FBRXJDLE1BQU0sTUFBTSxHQUFHLElBQUkseUJBQWMsQ0FBQztJQUNoQyxXQUFXLEVBQUUsa0JBQWtCO0NBQ2hDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLG1DQUFtQyxFQUFFLENBQUMsQ0FBQztBQUM1RSxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxnQ0FBZ0MsRUFBRSxDQUFDLENBQUM7QUFDMUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsaUJBQU8sRUFBRSxDQUFDLENBQUM7QUFDaEYsTUFBTSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRTtJQUN4QyxJQUFJLEVBQUUsNEJBQTRCO0lBQ2xDLE1BQU0sRUFBRSxZQUFZO0lBQ3BCLE9BQU8sRUFBRSxLQUFLO0NBQ2YsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLFlBQVksQ0FBQyxrQ0FBa0MsRUFBRTtJQUN0RCxJQUFJLEVBQUUsb0RBQW9EO0lBQzFELE1BQU0sRUFBRSxZQUFZO0lBQ3BCLE9BQU8sRUFBRSxLQUFLO0NBQ2YsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLFlBQVksQ0FBQyw2QkFBNkIsRUFBRTtJQUNqRCxJQUFJLEVBQUUsaUNBQWlDO0lBQ3ZDLE1BQU0sRUFBRSxZQUFZO0lBQ3BCLE9BQU8sRUFBRSxLQUFLO0NBQ2YsQ0FBQyxDQUFDO0FB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